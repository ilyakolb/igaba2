# -*- coding: utf-8 -*-
"""
Created on Sat Nov 21 08:11:51 2020

@author: kolbi
    
"""

import pandas as pd
import numpy as np
import os

def import_igaba_pkl(nAP, segmentation_type, omit_min_px=1800):
    '''
    import data pkl generated by ingest-igabasnfr-csv notebook
    segmentation_type: 'ilastik-segmented-csvs' or 'responsivepx-segmented-csvs'
    nAP: 10 or 40 AP stim
    omit_min_px: minimum responsive pixels filter (0 [unfiltered] or 1800)
    '''
    csv_dir = r'./data/{}/good-{}AP-all-omit_min_px={}.csv'.format(segmentation_type, nAP,omit_min_px)
    df_pkl_dir = os.path.join('data', segmentation_type,os.path.split(csv_dir)[-1].split('.')[0] + '.pkl')
    
    print('Loading: {}'.format(df_pkl_dir))
    return pd.read_pickle(df_pkl_dir)

def parse_name_igabasnfr(construct):
    '''
    parse_name_igabasnfr: parse construct field in igabasnfr table (multiple mutations assumed)
    @input:
        construct (str): construct name e.g. 'F102Y K253L R168P L178S 514.4592'
        assume ends with 514, ignore all after ;
    @return:
        origLetters (list of str): original aa
        positions_np (list of int): aa position in sequence
        newLetters (list of str): replacement aa
        construct_id (str): e.g. 514.4592
        n_mutations (int): number of mutations
        mutation_str (str): e.g. 'F102G'
    '''

    # print(mutation_str)
    
    id_str = '514.'
    assert id_str in construct, 'Could not parse {}'.format(construct)
    
    if ';' in construct:
        construct_str = construct[:construct.find(';')]
    else:
        construct_str = construct
    mutation_and_id_str = construct_str.lstrip().rstrip() # 'S99C F102Y K253L L178R 514.4497'

    split_list = mutation_and_id_str.split(" ")
    id_str_match = [s for s in split_list if id_str in s]
    construct_id = id_str_match[0]
    split_list.remove(id_str_match[0]) # remove construct id (514.xxxx)
    mutation_str = ' '.join(split_list) # 'S99C F102Y K253L L178R'

    if any('STO' in s for s in split_list):
        origLetters = [split_list[0][0]]
        newLetters = ['STOP']
        positions = int(split_list[0][1:split_list[0].index('STO')])
        n_mutations = 1
    else:
        origLetters = [s[0] for s in split_list]
        newLetters = [s[-1] for s in split_list]
        positions = [int(s[1:-1]) for s in split_list]
        n_mutations = len(newLetters)

    positions_np = np.asarray(positions)
    return (origLetters, newLetters, positions_np, n_mutations, construct_id, mutation_str)

def calcBg(streamFrame, percent):
    """
    calculate background of stream image (bottom (percent)% of image)

    inputs
    ======
    streamFrame: single frame from tif stack
    percent: bottom % to be considered background and subtracted from Ftrace
    """
    allVals = np.ndarray.flatten(streamFrame)
    allVals_sorted = np.sort(allVals)

    lenData = len(allVals)
    bgInd = int(np.round(lenData * percent / 100))
    if bgInd < 1: 
        bgInd = 1
    elif bgInd > lenData:
        bgInd = lenData

    bg = allVals_sorted[bgInd]
    return bg

def save_clipboard(filename = 'out.pkl'):
    '''
    save clipboard to pandas array
    
    INSTRUCTIONS
    ============
    
    if using with Fiji, save plot as Data >> Copy all data
    
    Run from command line:
        > conda activate base2
        > Z:
        > cd <destination folder>
        > save_clipboard(r'D:\imaging_local\20201124_iGABASnFR_imaging_IK\5AP\1_1.pkl')
    '''
    
    d = pd.read_clipboard()
    
    print(d.columns)
    if 'X' not in d.columns and 'Slice' not in d.columns and 'X0' not in d.columns:
        raise ValueError('X / X0 / Slice not in clipboard!')
    
    first_col = d.columns[0] # can be 'X' or 'X0'
    d.drop([first_col], axis=1)
    
    if filename == 'out.pkl':
        print('Saving to default out.pkl')
    
    print('Saving to: ' + filename)
    d.to_pickle(filename)
    print('Saved')

def calc_dff_trace(bg_trace, f_trace):
    # calculate df/f
    f0 = np.mean(f_trace[:100])
    return (f_trace-f0)/(f0-bg_trace)

def debleach(f_trace, t):
    '''
    simple linear regression
    f_trace: [1xN] F trace
    t: [1xN] entire time vector
    '''
    fit_idx = np.concatenate((np.arange(50), np.arange(-50,-1)))
    x_fit = t[fit_idx]
    y_fit = f_trace[fit_idx]
    p = np.polyfit(x_fit, y_fit, 1)
    return f_trace - np.polyval(p, t)

# all mutated positions in JM's coordinates JH: from Z:\ilya\protein\iGABASnFR_naming_lookup.xlsx
# map from JM's numbering to protein numbering
# i.e. to get true position of F102G, look up position_LUT[102]
# 1st column: JM names
# 2nd column: protein positions
position_LUT = {8: 8,
12: 12,
14: 14,
17: 17,
38: 38,
39: 39,
41: 41,
99: 99,
101: 101,
102: 102,
104: 104,
115: 115,
137: 137,
207: 207,
211: 211,
225: 225,
253: 253,
256: 256,
258: 258,
262: 262,
263: 263,
267: 267,
272: 272,
274: 274,
276: 276,
150: 280,
162: 292,
164: 294,
165: 295,
168: 298,
178: 308,
200: 330,
203: 333,
205: 335,
220: 393,
282: 527,
283: 528,
291: 536,
293: 538}